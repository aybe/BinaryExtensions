<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BinaryExtensions</name>
    </assembly>
    <members>
        <member name="T:BinaryExtensions.BinaryReaderExtensions">
            <summary>
                Extension methods for <see cref="T:System.IO.BinaryReader" />.
            </summary>
        </member>
        <member name="M:BinaryExtensions.BinaryReaderExtensions.Read``1(System.IO.BinaryReader,System.Func{System.IO.BinaryReader,``0},System.Int32)">
            <summary>
                Reads an array of items using a function.
            </summary>
            <typeparam name="T">
                The type of item to read.
            </typeparam>
            <param name="reader">
                The source binary reader.
            </param>
            <param name="func">
                The function for reading an item.
            </param>
            <param name="count">
                The number of items to read.
            </param>
            <returns>
                The array of items read.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="reader" /> or <paramref name="func" /> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="count" /> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:BinaryExtensions.BinaryReaderExtensions.ReadEnum``1(System.IO.BinaryReader,BinaryExtensions.Endianness)">
            <summary>
                Reads an enumeration.
            </summary>
            <typeparam name="T">
                The type of enumeration.
            </typeparam>
            <param name="reader">
                The source binary reader.
            </param>
            <param name="endianness">
                The endianness for the enumeration.
            </param>
            <returns>
                The enumeration read.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="reader" /> is <c>null</c>.
            </exception>
        </member>
        <member name="T:BinaryExtensions.Endianness">
            <summary>
                Specifies the byte order for an integral type.
            </summary>
        </member>
        <member name="F:BinaryExtensions.Endianness.Native">
            <summary>
                Platform endianness.
            </summary>
        </member>
        <member name="F:BinaryExtensions.Endianness.BigEndian">
            <summary>
                Big-endian, i.e. MSB.
            </summary>
        </member>
        <member name="F:BinaryExtensions.Endianness.LittleEndian">
            <summary>
                Little-endian, i.e. LSB.
            </summary>
        </member>
        <member name="T:BinaryExtensions.EndiannessExtensions">
            <summary>
                Extension methods for endianness.
            </summary>
        </member>
        <member name="P:BinaryExtensions.EndiannessExtensions.Endianness">
            <summary>
                Gets the endianness for this environment.
            </summary>
        </member>
        <member name="M:BinaryExtensions.EndiannessExtensions.ReadInt16(System.IO.BinaryReader,BinaryExtensions.Endianness)">
            <summary>Reads a 16-bit signed integer from current stream.</summary>
            <param name="reader">The source binary reader.</param>
            <param name="endianness">The endianness of the integer.</param>
            <returns>The integer read from the stream.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader" /> is <c>null</c>.</exception>
            <exception cref="T:System.IO.EndOfStreamException">Not enough bytes to read the integer from current position.</exception>
        </member>
        <member name="M:BinaryExtensions.EndiannessExtensions.ReadInt32(System.IO.BinaryReader,BinaryExtensions.Endianness)">
            <summary>Reads a 32-bit signed integer from current stream.</summary>
            <param name="reader">The source binary reader.</param>
            <param name="endianness">The endianness of the integer.</param>
            <returns>The integer read from the stream.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader" /> is <c>null</c>.</exception>
            <exception cref="T:System.IO.EndOfStreamException">Not enough bytes to read the integer from current position.</exception>
        </member>
        <member name="M:BinaryExtensions.EndiannessExtensions.ReadInt64(System.IO.BinaryReader,BinaryExtensions.Endianness)">
            <summary>Reads a 64-bit signed integer from current stream.</summary>
            <param name="reader">The source binary reader.</param>
            <param name="endianness">The endianness of the integer.</param>
            <returns>The integer read from the stream.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader" /> is <c>null</c>.</exception>
            <exception cref="T:System.IO.EndOfStreamException">Not enough bytes to read the integer from current position.</exception>
        </member>
        <member name="M:BinaryExtensions.EndiannessExtensions.ReadUInt16(System.IO.BinaryReader,BinaryExtensions.Endianness)">
            <summary>Reads a 16-bit unsigned integer from current stream.</summary>
            <param name="reader">The source binary reader.</param>
            <param name="endianness">The endianness of the integer.</param>
            <returns>The integer read from the stream.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader" /> is <c>null</c>.</exception>
            <exception cref="T:System.IO.EndOfStreamException">Not enough bytes to read the integer from current position.</exception>
        </member>
        <member name="M:BinaryExtensions.EndiannessExtensions.ReadUInt32(System.IO.BinaryReader,BinaryExtensions.Endianness)">
            <summary>Reads a 32-bit unsigned integer from current stream.</summary>
            <param name="reader">The source binary reader.</param>
            <param name="endianness">The endianness of the integer.</param>
            <returns>The integer read from the stream.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader" /> is <c>null</c>.</exception>
            <exception cref="T:System.IO.EndOfStreamException">Not enough bytes to read the integer from current position.</exception>
        </member>
        <member name="M:BinaryExtensions.EndiannessExtensions.ReadUInt64(System.IO.BinaryReader,BinaryExtensions.Endianness)">
            <summary>Reads a 64-bit unsigned integer from current stream.</summary>
            <param name="reader">The source binary reader.</param>
            <param name="endianness">The endianness of the integer.</param>
            <returns>The integer read from the stream.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader" /> is <c>null</c>.</exception>
            <exception cref="T:System.IO.EndOfStreamException">Not enough bytes to read the integer from current position.</exception>
        </member>
        <member name="M:BinaryExtensions.EndiannessExtensions.ReadInt16(System.Byte[],System.Int32,BinaryExtensions.Endianness)">
            <summary>Reads a 16-bit signed integer from this array.</summary>
            <param name="array">The source array.</param>
            <param name="index">The position to read the integer from <paramref name="array"/>.</param>
            <param name="endianness">The endianness of the integer.</param>
            <returns>The integer read from the array.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Not enough bytes to read the integer from <paramref name="index" />.</exception>
        </member>
        <member name="M:BinaryExtensions.EndiannessExtensions.ReadInt32(System.Byte[],System.Int32,BinaryExtensions.Endianness)">
            <summary>Reads a 32-bit signed integer from this array.</summary>
            <param name="array">The source array.</param>
            <param name="index">The position to read the integer from <paramref name="array"/>.</param>
            <param name="endianness">The endianness of the integer.</param>
            <returns>The integer read from the array.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Not enough bytes to read the integer from <paramref name="index" />.</exception>
        </member>
        <member name="M:BinaryExtensions.EndiannessExtensions.ReadInt64(System.Byte[],System.Int32,BinaryExtensions.Endianness)">
            <summary>Reads a 64-bit signed integer from this array.</summary>
            <param name="array">The source array.</param>
            <param name="index">The position to read the integer from <paramref name="array"/>.</param>
            <param name="endianness">The endianness of the integer.</param>
            <returns>The integer read from the array.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Not enough bytes to read the integer from <paramref name="index" />.</exception>
        </member>
        <member name="M:BinaryExtensions.EndiannessExtensions.ReadUInt16(System.Byte[],System.Int32,BinaryExtensions.Endianness)">
            <summary>Reads a 16-bit unsigned integer from this array.</summary>
            <param name="array">The source array.</param>
            <param name="index">The position to read the integer from <paramref name="array"/>.</param>
            <param name="endianness">The endianness of the integer.</param>
            <returns>The integer read from the array.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Not enough bytes to read the integer from <paramref name="index" />.</exception>
        </member>
        <member name="M:BinaryExtensions.EndiannessExtensions.ReadUInt32(System.Byte[],System.Int32,BinaryExtensions.Endianness)">
            <summary>Reads a 32-bit unsigned integer from this array.</summary>
            <param name="array">The source array.</param>
            <param name="index">The position to read the integer from <paramref name="array"/>.</param>
            <param name="endianness">The endianness of the integer.</param>
            <returns>The integer read from the array.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Not enough bytes to read the integer from <paramref name="index" />.</exception>
        </member>
        <member name="M:BinaryExtensions.EndiannessExtensions.ReadUInt64(System.Byte[],System.Int32,BinaryExtensions.Endianness)">
            <summary>Reads a 64-bit unsigned integer from this array.</summary>
            <param name="array">The source array.</param>
            <param name="index">The position to read the integer from <paramref name="array"/>.</param>
            <param name="endianness">The endianness of the integer.</param>
            <returns>The integer read from the array.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Not enough bytes to read the integer from <paramref name="index" />.</exception>
        </member>
        <member name="M:BinaryExtensions.EndiannessExtensions.TryReadInt16(System.IO.BinaryReader,BinaryExtensions.Endianness,System.Int16@)">
            <summary>Tries to read a 16-bit signed integer from current stream.</summary>
            <param name="reader">The source binary reader.</param>
            <param name="endianness">The endianness of the integer.</param>
            <param name="result">The variable receiving the integer.</param>
            <returns><c>true</c> if the integer was read from stream; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader" /> is <c>null</c>.</exception>
        </member>
        <member name="M:BinaryExtensions.EndiannessExtensions.TryReadInt32(System.IO.BinaryReader,BinaryExtensions.Endianness,System.Int32@)">
            <summary>Tries to read a 32-bit signed integer from current stream.</summary>
            <param name="reader">The source binary reader.</param>
            <param name="endianness">The endianness of the integer.</param>
            <param name="result">The variable receiving the integer.</param>
            <returns><c>true</c> if the integer was read from stream; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader" /> is <c>null</c>.</exception>
        </member>
        <member name="M:BinaryExtensions.EndiannessExtensions.TryReadInt64(System.IO.BinaryReader,BinaryExtensions.Endianness,System.Int64@)">
            <summary>Tries to read a 64-bit signed integer from current stream.</summary>
            <param name="reader">The source binary reader.</param>
            <param name="endianness">The endianness of the integer.</param>
            <param name="result">The variable receiving the integer.</param>
            <returns><c>true</c> if the integer was read from stream; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader" /> is <c>null</c>.</exception>
        </member>
        <member name="M:BinaryExtensions.EndiannessExtensions.TryReadUInt16(System.IO.BinaryReader,BinaryExtensions.Endianness,System.UInt16@)">
            <summary>Tries to read a 16-bit unsigned integer from current stream.</summary>
            <param name="reader">The source binary reader.</param>
            <param name="endianness">The endianness of the integer.</param>
            <param name="result">The variable receiving the integer.</param>
            <returns><c>true</c> if the integer was read from stream; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader" /> is <c>null</c>.</exception>
        </member>
        <member name="M:BinaryExtensions.EndiannessExtensions.TryReadUInt32(System.IO.BinaryReader,BinaryExtensions.Endianness,System.UInt32@)">
            <summary>Tries to read a 32-bit unsigned integer from current stream.</summary>
            <param name="reader">The source binary reader.</param>
            <param name="endianness">The endianness of the integer.</param>
            <param name="result">The variable receiving the integer.</param>
            <returns><c>true</c> if the integer was read from stream; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader" /> is <c>null</c>.</exception>
        </member>
        <member name="M:BinaryExtensions.EndiannessExtensions.TryReadUInt64(System.IO.BinaryReader,BinaryExtensions.Endianness,System.UInt64@)">
            <summary>Tries to read a 64-bit unsigned integer from current stream.</summary>
            <param name="reader">The source binary reader.</param>
            <param name="endianness">The endianness of the integer.</param>
            <param name="result">The variable receiving the integer.</param>
            <returns><c>true</c> if the integer was read from stream; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader" /> is <c>null</c>.</exception>
        </member>
        <member name="M:BinaryExtensions.EndiannessExtensions.TryReadInt16(System.Byte[],System.Int32,BinaryExtensions.Endianness,System.Int16@)">
            <summary>Tries to read a 16-bit signed integer from this array.</summary>
            <param name="array">The source array.</param>
            <param name="index">The position to read the integer from <paramref name="array"/>.</param>
            <param name="endianness">The endianness of the integer to read.</param>
            <param name="result">The variable receiving the integer.</param>
            <returns><c>true</c> if the integer was read from array; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is <c>null</c>.</exception>
        </member>
        <member name="M:BinaryExtensions.EndiannessExtensions.TryReadInt32(System.Byte[],System.Int32,BinaryExtensions.Endianness,System.Int32@)">
            <summary>Tries to read a 32-bit signed integer from this array.</summary>
            <param name="array">The source array.</param>
            <param name="index">The position to read the integer from <paramref name="array"/>.</param>
            <param name="endianness">The endianness of the integer to read.</param>
            <param name="result">The variable receiving the integer.</param>
            <returns><c>true</c> if the integer was read from array; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is <c>null</c>.</exception>
        </member>
        <member name="M:BinaryExtensions.EndiannessExtensions.TryReadInt64(System.Byte[],System.Int32,BinaryExtensions.Endianness,System.Int64@)">
            <summary>Tries to read a 64-bit signed integer from this array.</summary>
            <param name="array">The source array.</param>
            <param name="index">The position to read the integer from <paramref name="array"/>.</param>
            <param name="endianness">The endianness of the integer to read.</param>
            <param name="result">The variable receiving the integer.</param>
            <returns><c>true</c> if the integer was read from array; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is <c>null</c>.</exception>
        </member>
        <member name="M:BinaryExtensions.EndiannessExtensions.TryReadUInt16(System.Byte[],System.Int32,BinaryExtensions.Endianness,System.UInt16@)">
            <summary>Tries to read a 16-bit unsigned integer from this array.</summary>
            <param name="array">The source array.</param>
            <param name="index">The position to read the integer from <paramref name="array"/>.</param>
            <param name="endianness">The endianness of the integer to read.</param>
            <param name="result">The variable receiving the integer.</param>
            <returns><c>true</c> if the integer was read from array; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is <c>null</c>.</exception>
        </member>
        <member name="M:BinaryExtensions.EndiannessExtensions.TryReadUInt32(System.Byte[],System.Int32,BinaryExtensions.Endianness,System.UInt32@)">
            <summary>Tries to read a 32-bit unsigned integer from this array.</summary>
            <param name="array">The source array.</param>
            <param name="index">The position to read the integer from <paramref name="array"/>.</param>
            <param name="endianness">The endianness of the integer to read.</param>
            <param name="result">The variable receiving the integer.</param>
            <returns><c>true</c> if the integer was read from array; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is <c>null</c>.</exception>
        </member>
        <member name="M:BinaryExtensions.EndiannessExtensions.TryReadUInt64(System.Byte[],System.Int32,BinaryExtensions.Endianness,System.UInt64@)">
            <summary>Tries to read a 64-bit unsigned integer from this array.</summary>
            <param name="array">The source array.</param>
            <param name="index">The position to read the integer from <paramref name="array"/>.</param>
            <param name="endianness">The endianness of the integer to read.</param>
            <param name="result">The variable receiving the integer.</param>
            <returns><c>true</c> if the integer was read from array; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is <c>null</c>.</exception>
        </member>
        <member name="T:BinaryExtensions.IntegralTypesExtensions">
            <summary>
                Extension methods for integral types.
            </summary>
        </member>
        <member name="M:BinaryExtensions.IntegralTypesExtensions.ToInt32(System.Int64)">
            <summary>
                Converts this integer to a 32-bit signed integer.
            </summary>
            <param name="value">
                The integer to convert.
            </param>
            <returns>
                The integer as a 32-bit signed integer.
            </returns>
        </member>
        <member name="M:BinaryExtensions.IntegralTypesExtensions.ToInt32(System.UInt32)">
            <summary>
                Converts this integer to a 32-bit signed integer.
            </summary>
            <param name="value">
                The integer to convert.
            </param>
            <returns>
                The integer as a 32-bit signed integer.
            </returns>
        </member>
        <member name="M:BinaryExtensions.IntegralTypesExtensions.ToInt32(System.UInt64)">
            <summary>
                Converts this integer to a 32-bit signed integer.
            </summary>
            <param name="value">
                The integer to convert.
            </param>
            <returns>
                The integer as a 32-bit signed integer.
            </returns>
        </member>
        <member name="T:BinaryExtensions.StreamExtensions">
            <summary>
                Extension methods for <see cref="T:System.IO.Stream" />.
            </summary>
        </member>
        <member name="M:BinaryExtensions.StreamExtensions.GetBinaryReader(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
                Gets a binary reader based on this stream.
            </summary>
            <param name="stream">
                The source stream.
            </param>
            <param name="encoding">
                The encoding for the binary reader, <c>null</c> for <see cref="P:System.Text.Encoding.Default" />.
            </param>
            <param name="leaveOpen">
                <c>true</c> to leave the stream open after the binary reader is disposed; otherwise, <c>false</c>.
            </param>
            <returns>
                The binary reader.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="stream" /> is <c>null</c>.
            </exception>
        </member>
        <member name="M:BinaryExtensions.StreamExtensions.ReadBytes(System.IO.Stream,System.Int32)">
            <summary>
                Reads bytes at current position from this stream.
            </summary>
            <param name="stream">
                The source stream.
            </param>
            <param name="count">
                The number of bytes to read.
            </param>
            <returns>
                The array of bytes read.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="stream" /> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="count" /> is less than or equal to zero.
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">
                <paramref name="count" /> bytes could not be read from <paramref name="stream" />.
            </exception>
        </member>
    </members>
</doc>
